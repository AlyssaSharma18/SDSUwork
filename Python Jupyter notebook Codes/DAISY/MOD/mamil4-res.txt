
A MAMILLARY MODEL OF 4 COMPARTMENTS$

seed_ := 29$

NUMBER OF EQUATIONS$

n_ := 5$

VARIABLES VECTOR$

b_ := {u,
y,
x1,
x2,
x3,
x4}$

UNKNOWN PARAMETER(S) VECTOR$

b1_ := {k01,
k12,
k21,
k13,
k31,
k14,
k41}$

RANKING AMONG THE VARIABLES$

bb_ := {u,
y,
df(u,t),
df(y,t),
df(u,t,2),
df(y,t,2),
df(u,t,3),
df(y,t,3),
df(u,t,4),
df(y,t,4),
x1,
x2,
x3,
x4,
df(x1,t),
df(x2,t),
df(x3,t),
df(x4,t)}$

NUMBER OF INPUT(S)$

nu_ := 1$

NUMBER OF OUTPUT(S)$

ny_ := 1$

NUMBER OF STATE(S) $

nx_ := 4$

MODEL EQUATION(S)$

c_ := {df(x1,t)= - (k41*x1 - u + k31*x1 + k21*x1 - k14*x4 - k13*x3 - k12*x2) - k01*x1,
df(x2,t)= - k12*x2 + k21*x1,
df(x3,t)= - k13*x3 + k31*x1,
df(x4,t)= - k14*x4 + k41*x1,
y=x1}$

CHARACTERISTIC SET$

aa_(1) := df(u,t,3)*(k12**2*k13**2 - 2*k12**2*k13*k14 + k12**2*k14**2 - k12*k13**3 + k12*k13**2*k14 + k12*k13*k14**2 - 
k12*k14**3 + k13**3*k14 - 2*k13**2*k14**2 + k13*k14**3) + df(u,t,2)*(k12**3*k13**2 - 2*k12**3*k13*k14 + k12**3*k14**2 - 
k12*k13**4 + k12*k13**3*k14 + k12*k13*k14**3 - k12*k14**4 + k13**4*k14 - k13**3*k14**2 - k13**2*k14**3 + k13*k14**4) + 
df(u,t)*(k12**3*k13**3 - k12**3*k13**2*k14 - k12**3*k13*k14**2 + k12**3*k14**3 - k12**2*k13**4 + k12**2*k13**3*k14 + k12
**2*k13*k14**3 - k12**2*k14**4 + k13**4*k14**2 - 2*k13**3*k14**3 + k13**2*k14**4) + df(y,t,4)*( - k12**2*k13**2 + 2*k12
**2*k13*k14 - k12**2*k14**2 + k12*k13**3 - k12*k13**2*k14 - k12*k13*k14**2 + k12*k14**3 - k13**3*k14 + 2*k13**2*k14**2 -
 k13*k14**3) + df(y,t,3)*( - k01*k12**2*k13**2 + 2*k01*k12**2*k13*k14 - k01*k12**2*k14**2 + k01*k12*k13**3 - k01*k12*k13
**2*k14 - k01*k12*k13*k14**2 + k01*k12*k14**3 - k01*k13**3*k14 + 2*k01*k13**2*k14**2 - k01*k13*k14**3 - k12**3*k13**2 + 
2*k12**3*k13*k14 - k12**3*k14**2 - k12**2*k13**2*k21 - k12**2*k13**2*k31 - k12**2*k13**2*k41 + 2*k12**2*k13*k14*k21 + 2*
k12**2*k13*k14*k31 + 2*k12**2*k13*k14*k41 - k12**2*k14**2*k21 - k12**2*k14**2*k31 - k12**2*k14**2*k41 + k12*k13**4 - k12
*k13**3*k14 + k12*k13**3*k21 + k12*k13**3*k31 + k12*k13**3*k41 - k12*k13**2*k14*k21 - k12*k13**2*k14*k31 - k12*k13**2*
k14*k41 - k12*k13*k14**3 - k12*k13*k14**2*k21 - k12*k13*k14**2*k31 - k12*k13*k14**2*k41 + k12*k14**4 + k12*k14**3*k21 + 
k12*k14**3*k31 + k12*k14**3*k41 - k13**4*k14 + k13**3*k14**2 - k13**3*k14*k21 - k13**3*k14*k31 - k13**3*k14*k41 + k13**2
*k14**3 + 2*k13**2*k14**2*k21 + 2*k13**2*k14**2*k31 + 2*k13**2*k14**2*k41 - k13*k14**4 - k13*k14**3*k21 - k13*k14**3*k31
 - k13*k14**3*k41) + df(y,t,2)*( - k01*k12**3*k13**2 + 2*k01*k12**3*k13*k14 - k01*k12**3*k14**2 + k01*k12*k13**4 - k01*
k12*k13**3*k14 - k01*k12*k13*k14**3 + k01*k12*k14**4 - k01*k13**4*k14 + k01*k13**3*k14**2 + k01*k13**2*k14**3 - k01*k13*
k14**4 - k12**3*k13**3 + k12**3*k13**2*k14 - k12**3*k13**2*k31 - k12**3*k13**2*k41 + k12**3*k13*k14**2 + 2*k12**3*k13*
k14*k31 + 2*k12**3*k13*k14*k41 - k12**3*k14**3 - k12**3*k14**2*k31 - k12**3*k14**2*k41 + k12**2*k13**4 - k12**2*k13**3*
k14 - k12**2*k13**3*k21 + k12**2*k13**3*k31 + k12**2*k13**2*k14*k21 - 2*k12**2*k13**2*k14*k31 + k12**2*k13**2*k14*k41 - 
k12**2*k13*k14**3 + k12**2*k13*k14**2*k21 + k12**2*k13*k14**2*k31 - 2*k12**2*k13*k14**2*k41 + k12**2*k14**4 - k12**2*k14
**3*k21 + k12**2*k14**3*k41 + k12*k13**4*k21 + k12*k13**4*k41 - 2*k12*k13**3*k14*k41 - 2*k12*k13**2*k14**2*k21 + k12*k13
**2*k14**2*k31 + k12*k13**2*k14**2*k41 - 2*k12*k13*k14**3*k31 + k12*k14**4*k21 + k12*k14**4*k31 - k13**4*k14**2 - k13**4
*k14*k21 - k13**4*k14*k41 + 2*k13**3*k14**3 + k13**3*k14**2*k21 - k13**3*k14**2*k31 + 2*k13**3*k14**2*k41 - k13**2*k14**
4 + k13**2*k14**3*k21 + 2*k13**2*k14**3*k31 - k13**2*k14**3*k41 - k13*k14**4*k21 - k13*k14**4*k31) + df(y,t)*( - k01*k12
**3*k13**3 + k01*k12**3*k13**2*k14 + k01*k12**3*k13*k14**2 - k01*k12**3*k14**3 + k01*k12**2*k13**4 - k01*k12**2*k13**3*
k14 - k01*k12**2*k13*k14**3 + k01*k12**2*k14**4 - k01*k13**4*k14**2 + 2*k01*k13**3*k14**3 - k01*k13**2*k14**4 - k12**3*
k13**3*k14 - k12**3*k13**3*k41 + 2*k12**3*k13**2*k14**2 - k12**3*k13**2*k14*k31 + 2*k12**3*k13**2*k14*k41 - k12**3*k13*
k14**3 + 2*k12**3*k13*k14**2*k31 - k12**3*k13*k14**2*k41 - k12**3*k14**3*k31 + k12**2*k13**4*k14 + k12**2*k13**4*k41 - 
k12**2*k13**3*k14**2 - k12**2*k13**3*k14*k21 + k12**2*k13**3*k14*k31 - k12**2*k13**3*k14*k41 - k12**2*k13**2*k14**3 + 2*
k12**2*k13**2*k14**2*k21 - k12**2*k13**2*k14**2*k31 - k12**2*k13**2*k14**2*k41 + k12**2*k13*k14**4 - k12**2*k13*k14**3*
k21 - k12**2*k13*k14**3*k31 + k12**2*k13*k14**3*k41 + k12**2*k14**4*k31 - k12*k13**4*k14**2 + k12*k13**4*k14*k21 - k12*
k13**4*k14*k41 + 2*k12*k13**3*k14**3 - k12*k13**3*k14**2*k21 - k12*k13**3*k14**2*k31 + 2*k12*k13**3*k14**2*k41 - k12*k13
**2*k14**4 - k12*k13**2*k14**3*k21 + 2*k12*k13**2*k14**3*k31 - k12*k13**2*k14**3*k41 + k12*k13*k14**4*k21 - k12*k13*k14
**4*k31 - k13**4*k14**2*k21 + 2*k13**3*k14**3*k21 - k13**2*k14**4*k21) + u*k12*k13*k14*(k12**2*k13**2 - 2*k12**2*k13*k14
 + k12**2*k14**2 - k12*k13**3 + k12*k13**2*k14 + k12*k13*k14**2 - k12*k14**3 + k13**3*k14 - 2*k13**2*k14**2 + k13*k14**3
) + y*k01*k12*k13*k14*( - k12**2*k13**2 + 2*k12**2*k13*k14 - k12**2*k14**2 + k12*k13**3 - k12*k13**2*k14 - k12*k13*k14**
2 + k12*k14**3 - k13**3*k14 + 2*k13**2*k14**2 - k13*k14**3)$

aa_(2) :=  - x1 + y$

aa_(3) := df(u,t,2)*k13*k14**2*(k13 - k14) + df(u,t)*k13*k14**2*(k13**2 - k14**2) + df(y,t,3)*k13*k14**2*( - k13 + k14) 
+ df(y,t,2)*k13*k14**2*( - k01*k13 + k01*k14 - k13**2 - k13*k21 - k13*k31 - k13*k41 + k14**2 + k14*k21 + k14*k31 + k14*
k41) + df(y,t)*k13*k14**2*( - k01*k13**2 + k01*k14**2 + k12*k13*k21 - k12*k14*k21 - k13**2*k14 - k13**2*k21 - k13**2*k41
 + k13*k14**2 - k13*k14*k31 + k13*k14*k41 + k14**2*k21 + k14**2*k31) + u*k13**2*k14**3*(k13 - k14) + x2*k12*k13*k14**2*(
k12**2*k13 - k12**2*k14 - k12*k13**2 + k12*k14**2 + k13**2*k14 - k13*k14**2) + y*k13*k14**2*( - k01*k13**2*k14 + k01*k13
*k14**2 - k12**2*k13*k21 + k12**2*k14*k21 + k12*k13**2*k21 - k12*k14**2*k21 - k13**2*k14*k21 + k13*k14**2*k21)$

aa_(4) := df(u,t,2)*k12*k13*k14**3*(k12*k13 - k12*k14 - k13*k14 + k14**2) + df(u,t)*k12*k13*k14**3*(k12**2*k13 - k12**2*
k14 - k13*k14**2 + k14**3) + df(y,t,3)*k12*k13*k14**3*( - k12*k13 + k12*k14 + k13*k14 - k14**2) + df(y,t,2)*k12*k13*k14
**3*( - k01*k12*k13 + k01*k12*k14 + k01*k13*k14 - k01*k14**2 - k12**2*k13 + k12**2*k14 - k12*k13*k21 - k12*k13*k31 - k12
*k13*k41 + k12*k14*k21 + k12*k14*k31 + k12*k14*k41 + k13*k14**2 + k13*k14*k21 + k13*k14*k31 + k13*k14*k41 - k14**3 - k14
**2*k21 - k14**2*k31 - k14**2*k41) + df(y,t)*k12*k13*k14**3*( - k01*k12**2*k13 + k01*k12**2*k14 + k01*k13*k14**2 - k01*
k14**3 - k12**2*k13*k14 - k12**2*k13*k31 - k12**2*k13*k41 + k12**2*k14**2 + k12**2*k14*k31 + k12**2*k14*k41 + k12*k13**2
*k31 + k12*k13*k14**2 - k12*k13*k14*k21 - k12*k13*k14*k31 + k12*k13*k14*k41 - k12*k14**3 + k12*k14**2*k21 - k12*k14**2*
k41 - k13**2*k14*k31 + k13*k14**2*k21 + 2*k13*k14**2*k31 - k14**3*k21 - k14**3*k31) + u*k12**2*k13*k14**4*(k12*k13 - k12
*k14 - k13*k14 + k14**2) + x3*k12*k13**2*k14**3*( - k12**2*k13**2 + 2*k12**2*k13*k14 - k12**2*k14**2 + k12*k13**3 - k12*
k13**2*k14 - k12*k13*k14**2 + k12*k14**3 - k13**3*k14 + 2*k13**2*k14**2 - k13*k14**3) + y*k12*k13*k14**3*( - k01*k12**2*
k13*k14 + k01*k12**2*k14**2 + k01*k12*k13*k14**2 - k01*k12*k14**3 + k12**2*k13**2*k31 - 2*k12**2*k13*k14*k31 + k12**2*
k14**2*k31 - k12*k13**3*k31 + k12*k13**2*k14*k31 + k12*k13*k14**2*k31 - k12*k14**3*k31 + k13**3*k14*k31 - 2*k13**2*k14**
2*k31 + k13*k14**3*k31)$

aa_(5) := df(u,t,2)*(k12*k13 - k12*k14 - k13**2 + k13*k14) + df(u,t)*(k12**2*k13 - k12**2*k14 - k13**3 + k13**2*k14) + 
df(y,t,3)*( - k12*k13 + k12*k14 + k13**2 - k13*k14) + df(y,t,2)*( - k01*k12*k13 + k01*k12*k14 + k01*k13**2 - k01*k13*k14
 - k12**2*k13 + k12**2*k14 - k12*k13*k21 - k12*k13*k31 - k12*k13*k41 + k12*k14*k21 + k12*k14*k31 + k12*k14*k41 + k13**3 
- k13**2*k14 + k13**2*k21 + k13**2*k31 + k13**2*k41 - k13*k14*k21 - k13*k14*k31 - k13*k14*k41) + df(y,t)*( - k01*k12**2*
k13 + k01*k12**2*k14 + k01*k13**3 - k01*k13**2*k14 - k12**2*k13**2 + k12**2*k13*k14 - k12**2*k13*k31 - k12**2*k13*k41 + 
k12**2*k14*k31 + k12**2*k14*k41 + k12*k13**3 - k12*k13**2*k14 - k12*k13**2*k21 + k12*k13**2*k31 + k12*k13*k14*k21 - k12*
k13*k14*k31 + k12*k13*k14*k41 - k12*k14**2*k41 + k13**3*k21 + k13**3*k41 - k13**2*k14*k21 - 2*k13**2*k14*k41 + k13*k14**
2*k41) + u*k12*k13*(k12*k13 - k12*k14 - k13**2 + k13*k14) + x4*k14*(k12**2*k13**2 - 2*k12**2*k13*k14 + k12**2*k14**2 - 
k12*k13**3 + k12*k13**2*k14 + k12*k13*k14**2 - k12*k14**3 + k13**3*k14 - 2*k13**2*k14**2 + k13*k14**3) + y*( - k01*k12**
2*k13**2 + k01*k12**2*k13*k14 + k01*k12*k13**3 - k01*k12*k13**2*k14 - k12**2*k13**2*k41 + 2*k12**2*k13*k14*k41 - k12**2*
k14**2*k41 + k12*k13**3*k41 - k12*k13**2*k14*k41 - k12*k13*k14**2*k41 + k12*k14**3*k41 - k13**3*k14*k41 + 2*k13**2*k14**
2*k41 - k13*k14**3*k41)$

MODEL ALGEBRAICALLY OBSERVABLE$

NORMALIZED  INPUT /OUTPUT RELATION(S) $

aan_(1) := df(u,t,3) + df(u,t,2)*(k12 + k13 + k14) + df(u,t)*(k12*k13 + k12*k14 + k13*k14) - df(y,t,4) - df(y,t,3)*(k01 
+ k12 + k13 + k14 + k21 + k31 + k41) - df(y,t,2)*(k01*k12 + k01*k13 + k01*k14 + k12*k13 + k12*k14 + k12*k31 + k12*k41 + 
k13*k14 + k13*k21 + k13*k41 + k14*k21 + k14*k31) - df(y,t)*(k01*k12*k13 + k01*k12*k14 + k01*k13*k14 + k12*k13*k14 + k12*
k13*k41 + k12*k14*k31 + k13*k14*k21) + u*k12*k13*k14 - y*k01*k12*k13*k14$

RANDOMLY CHOSEN NUMERICAL PARAMETER(S) VECTOR$

b2_ := {k01=13,k12=20,k21=18,k13=12,k31=27,k14=28,k41=8}$

EXHAUSTIVE SUMMARY $

flist_ := {k12*k13*k14 - 6720,
 - k01*k12*k13*k14 + 87360,
k12 + k13 + k14 - 60,
k12*k13 + k12*k14 + k13*k14 - 1136,
 - k01*k12*k13 - k01*k12*k14 - k01*k13*k14 - k12*k13*k14 - k12*k13*k41 - k12*k14*k31 - k13*k14*k21 + 44576,
 - k01 - k12 - k13 - k14 - k21 - k31 - k41 + 126,
 - k01*k12 - k01*k13 - k01*k14 - k12*k13 - k12*k14 - k12*k31 - k12*k41 - k13*k14 - k13*k21 - k13*k41 - k14*k21 - k14*k31
 + 4188}$

MODEL PARAMETER SOLUTION(S)$

 G_:=GROESOLVE(FLIST_,B1_) $

g_ := {{k21=8,k31=18,k41=27,k01=13,k12=28,k13=20,k14=12},
{k21=18,k31=8,k41=27,k01=13,k12=20,k13=28,k14=12},
{k21=8,k31=27,k41=18,k01=13,k12=28,k13=12,k14=20},
{k21=27,k31=8,k41=18,k01=13,k12=12,k13=28,k14=20},
{k21=18,k31=27,k41=8,k01=13,k12=20,k13=12,k14=28},
{k21=27,k31=18,k41=8,k01=13,k12=12,k13=20,k14=28}}$

MODEL LOCALLY IDENTIFIABLE$
